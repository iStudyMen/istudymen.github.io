export default class t extends HTMLElement{constructor(){super(),this.tabFocus=0,this.tabs=this.querySelectorAll('[role="tab"]'),this.tabList=this.querySelector('[role="tablist"]'),this.buttonBoundListener=this.handleTabChange.bind(this),this.keydownBoundListener=this.handleKeyPress.bind(this)}connectedCallback(){this.tabs.forEach((t=>{t.addEventListener("click",this.buttonBoundListener)})),this.tabList.addEventListener("keydown",this.keydownBoundListener)}handleKeyPress(t){39!==t.keyCode&&37!==t.keyCode||(this.tabs[this.tabFocus].setAttribute("tabindex",-1),39===t.keyCode?(this.tabFocus++,this.tabFocus>=this.tabs.length&&(this.tabFocus=0)):37===t.keyCode&&(this.tabFocus--,this.tabFocus<0&&(this.tabFocus=this.tabs.length-1)),this.tabs[this.tabFocus].setAttribute("tabindex",0),this.tabs[this.tabFocus].focus())}handleTabChange(t){const e=t.target,s=e.parentNode.parentNode,i=e.getAttribute("aria-controls");s.querySelectorAll('[aria-selected="true"]').forEach((t=>{t!==e&&(t.setAttribute("aria-selected",!1),t.setAttribute("tabindex",-1),t.classList.remove("is-active"))})),e.setAttribute("aria-selected",!0),e.setAttribute("tabindex",0),e.classList.add("is-active"),s.parentNode.querySelectorAll('[role="tabpanel"]').forEach((t=>{t.id===i?t.removeAttribute("hidden"):t.setAttribute("hidden",!0)}))}}