{"version":"https://jsonfeed.org/version/1","title":"爱学习的好孩子","home_page_url":"http://localhost/","feed_url":"http://localhost/feed.json","description":"活动老、学到老，绝不投机取巧，坚持日拱一卒，进一寸有一寸的欢喜。","items":[{"id":"http://localhost/archive/websocket-server-with-oak/","url":"http://localhost/archive/websocket-server-with-oak/","title":"WebSocket server with Oak","content_html":"A WebSocket server written in `Oak` is different from the `native` WebSocket server only for the setup phase. This is because Oak uses similar looking, but different APIs for the WebSocket setup. Once the WebSocket connection is established, the other APIs like `onopen`, `onmessage`, `onclose`, `onerror` etc. are the **same** whether it’s Oak or native.\n\n## Setup phase\n\nThe setup phase consists of two simple steps:\n\n- Check if connection can be upgraded (`isUpgradable`)\n- If upgradable, upgrade it (`upgrade`)\n\nThese two simple APIs are part of the Oak’s Context object. These APIs take care of upgrading the underlying HTTP connection to a two-way WebSocket connection.\n\n# Example\n\n<lume-code>\n\n```ts { title=\"server.ts\" }\nimport { Application } from \"jsr:@oak/oak@16.1.0/application\";\nimport { Router } from \"jsr:@oak/oak@16.1.0/router\";\n\nconst app = new Application({ logErrors: false });\nconst router = new Router();\nrouter.get(\"/wss\", (ctx) => {\n  if (!ctx.isUpgradable) {\n    ctx.throw(501);\n  }\n  const ws = ctx.upgrade();\n  ws.onopen = () => {\n    console.log(\"Connected to client\");\n    ws.send(\"Hello from server!\");\n  };\n  ws.onmessage = (m) => {\n    console.log(\"Got message from client: \", m.data);\n    ws.close();\n  };\n  ws.onclose = () => console.log(\"Disconncted from client\");\n});\napp.use(router.routes());\napp.use(router.allowedMethods());\napp.listen({ port: 8000 });\n```\n\n```ts { title=\"client.ts\" }\nconst ws = new WebSocket(\"ws://localhost:8000/wss\");\nws.onopen = () => console.log(\"Connected to server\");\nws.onmessage = (m) => {\n  console.log(\"Got message from server: \", m.data);\n  ws.send(`bye`);\n};\nws.onclose = () => console.log(\"Disconnected from server\");\n```\n</lume-code>\n\n\n# 评论","date_published":"Sat, 15 Jun 2024 01:57:54 GMT"},{"id":"http://localhost/linux/linuxzhong-tilde-he-homedequbie/","url":"http://localhost/linux/linuxzhong-tilde-he-homedequbie/","title":"Linux中~(tilde)和$HOME的区别","content_html":"我一直认为`~`和`$HOME`等效的，直到我用`ssh`登陆`fedora`后，运行`deno`程序时出现了错误。我的`.bash_profile`是这么写的：\n\n```shell\nexport DENO_INSTALL=\"~/.deno\"\nexport PATH=$PATH:$DENO_INSTALL/bin:/usr/local/nodejs/bin/\n```\n\n我可以运行`deno`，但是当我运行用`deno install`的脚本时，提示错误：\n\n```txt\n/home/adong/.deno/bin/testCMD: 第 3 行：exec: deno: 未找到\n```\n\n明明可以运行`deno`，说明`deno`的路径已经在`path`中了，但是运行脚本就会出错。\n\n如果我将`.bash_profile`修改为：\n\n```shell\nexport DENO_INSTALL=\"/home/adong/.deno\"\nexport PATH=$PATH:$DENO_INSTALL/bin:/usr/local/nodejs/bin/\n```\n\n一切运行正常，Good.\n\n那`~`和`$HOME`的完整路径，到底有什么区别？\n\n我查阅了[GNU - Tilde Expansion](https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html) 中介绍`~`和由它构成的`tilde-prefix`在`shell`中是如何被处理的，用代码举例解释：\n\n1. 没有`引号`或者`任何字符`在`~`之前的时候，才构成所谓`tilde-prefix`。\n\n```shell\n# \"~\"前有引号\n$ echo \"~\"\n~ \n\n# \"~\"前有其他字符串\n$ echo test~\ntest~ \n```\n\n2.  这个`tilde-prefix`中没有任何字符被引号包围的时候，`~`后的字符被当作可能的登录名\n\n```shell\n# 由于后面\"test\"被引号包围，所以\"~\"被当作字符串处理\n$ echo ~\"test\"\n~test\n```\n\n3.  如果登录名是`空字符串`，`~`被替换为`shell`变量`$HOME`\n```shell\n$ echo ~\n/home/xiaofei\n$ echo ~/foo\n/home/xiaofei/foo\n```\n\n4.  否则`tilde-prefix`被替换为特定登录名的`$HOME`\n\n```shell\n# ~root被当作用户root的home目录\n$ echo ~root/foo\n/root/foo \n\n# ~xiaofei被当作用户xiaofei的home目录\n$ echo ~xiaofei/foo\n/home/xiaofei/foo \n\n# 由于\"test\"用户名不存在，因此\"~\"被当作字符串处理\n$ echo ~test\n~test \n```\n\n5.  其他一些用法\n\n```shell\n# 当前目录\n$ pwd\n/home/xiaofei/test\n\n# \"~+\"被替换为当前目录\n$ echo ~+/foo\n/home/xiaofei/test/foo\n\n# \"~-\"被替换为上一次所在目录\n$ echo ~-/foo\n/home/xiaofei/foo \n```\n\n虽然该文档中也提到，在指定`$PATH`等环境变量时用`~`是OK的，但是从上述问题来看，`~`在读入另一个程序中进行处理的时候，可能出现意想不到的`Bug`，因此环境变量中尽量用完整的`绝对路径`！\n\n# 评论","date_published":"Fri, 14 Jun 2024 13:56:15 GMT"},{"id":"http://localhost/linux/linuxdekillminglingyongfa/","url":"http://localhost/linux/linuxdekillminglingyongfa/","title":"Linux的kill命令用法","content_html":"# 概要\n\n```shell\nkill [-s 信号说明符 | -n 信号编号 | -信号说明符] pid | 任务说明符 ... 或 kill -l [信号说明符]\n    向一个任务发送一个信号。\n```\n\n\n## 选项\n\n```shell\n-s sig    信号名称。\n-n sig    信号名称对应的数字。\n-l        列出信号名称。如果在该选项后提供了数字那么假设它是信号名称对应的数字。\n-L        等价于-l选项。\n```\n\n## 参数\n\n- pid: 进程ID\n- jobspec: 作业标识符\n\n## 返回值\n\n返回状态为成功除非给出了非法选项、执行出现错误。\n\n# 例子\n\n```shell\n# 列出所有信号名称：\n[user2@pc] kill -l\n\n[user2@pc] kill -l 9\nKILL\n```\n\n下面是常用的信号。\n|  信号 | 数字  | 说明 |\n|---|---|---|\n|  HUP | 1  | 终端挂断 |\n| INT  |  2   |  中断，同 `Ctrl` + `C`\n| QUIT  |  3  |   退出，同 `Ctrl` + `\\`\n| KILL  |  9  |   强制终止\n| TERM | 15  |   终止\n| CONT  | 18   |  继续（与STOP相反，fg/bg命令）\n| STOP | 19   |  暂停，同`Ctrl` + `Z`\n\n> [!tip]\n> 只有第`9`种信号`SIGKILL`才可以无条件终止进程，其他信号进程都有权利忽略。\n\n```shell\n# 以下发送KILL信号的形式等价\n[user2@pc] kill -s SIGKILL PID\n[user2@pc] kill -s KILL PID\n[user2@pc] kill -n 9 PID\n[user2@pc] kill -9 PID\n\n[user2@pc] sleep 90 &\n[1] 178420\n\n# 终止作业标识符为1的作业\n[user2@pc] kill -9 %1\n\n[user2@pc] jobs -l\n[1]+ 178420 KILLED                  ssh 192.168.1.4\n\n[user2@pc] sleep 90 &\n[1] 181357\n\n# 发送停止信号\n[user2@pc] kill -s STOP 181357\n\n[user2@pc] jobs -l\n[1]+ 181537 Stopped (signal)        sleep 90\n\n# 发送继续信号。\n[user2@pc] kill -s CONT 181357\n\n[user2@pc] jobs -l\n[1]+ 181537 Running                 sleep 90 &\n```\n\n# 注意\n\n- `bash`的作业控制命令包括`bg fg kill wait disown suspend`。\n- 该命令是`bash`内建命令，相关的帮助信息请查看`help`命令。\n\n\n# 评论","date_published":"Fri, 14 Jun 2024 11:57:16 GMT"},{"id":"http://localhost/archive/how-to-access-path-query-params-in-oak/","url":"http://localhost/archive/how-to-access-path-query-params-in-oak/","title":"How to access path & query params in Oak?","content_html":"> `P` - indicates `path` param\n> \n> `Q` - indicates `query` param\n\n比如：\n\n```txt\nhttp://localhost:8080/products/101/review/201?sort=recent&limit=100\n                                P          P          Q          Q \n```\n\n我们写一个例子来说明：\n\n```ts\nimport { Application } from \"jsr:@oak/oak@16.1.0/application\";\nimport { Router } from \"jsr:@oak/oak@16.1.0/router\";\n\nconst app = new Application();\nconst router = new Router();\nrouter.get(\"/books\", (ctx) => {\n  console.log(\"QUERY PARAMS:\");\n  ctx.request.url.searchParams.forEach((v, k) => console.log(`${k}:${v}`));\n  console.log(\"PATH PARAMS:\");\n  console.log(ctx.params);\n});\napp.use(router.routes());\napp.use(router.allowedMethods());\napp.listen({ port: 80 });\n```\n\n然后运行`deno run --allow-net app.ts` \n\n```shell\n$ curl \"http://localhost/products/101/images/201?a=b&c=d\"\nQUERY PARAMS:\na:b\nc:d\nPATH PARAMS:\n{ prdId: \"101\", imgId: \"201\" }\n```\n\n\n# 评论","date_published":"Fri, 14 Jun 2024 09:28:06 GMT"},{"id":"http://localhost/archive/linuxzhongduantabbuquantishihuluedaxiaoxie/","url":"http://localhost/archive/linuxzhongduantabbuquantishihuluedaxiaoxie/","title":"Linux终端Tab补全提示忽略大小写","content_html":"只需要在用户目录下创建`.inputrc`文件，并输入`set completion-ignore-case on`，重启终端即可。\n\n```shell\necho \"set completion-ignore-case on\" > .inputrc\n```\n\n\n# 评论","date_published":"Fri, 14 Jun 2024 03:53:54 GMT"},{"id":"http://localhost/archive/ffmpeg/","url":"http://localhost/archive/ffmpeg/","title":"FFmpeg","content_html":"# 提取视频中的音频\n\n```shell\n# 提取完整音频\nffmpeg -i sample.mp4 sample.mp3\n\n# 提取指定时间段的音频\n# ss指定开始时间戳，t指定编码持续时间\nffmpeg -i sample.mp4 -ss 00:03:05 -t 00:00:45.0 -q:a 0 -map a sample.mp3\n\n# 重新编码\nffmpeg -i input-video.avi -vn -acodec copy output-audio.aac\n```\n\n\n# 评论","date_published":"Thu, 13 Jun 2024 07:04:46 GMT"},{"id":"http://localhost/archive/fetch/","url":"http://localhost/archive/fetch/","title":"Fetch","content_html":"# 一、基本用法\n\n```js\nfetch(url, [option]);\n```\n\n`fetch`的功能与`XMLHttpRequest`基本相同，但有三个主要的差异。\n\n（1）`fetch`使用`Promise`，不使用回调函数，因此大大简化了写法，写起来更简洁。\n\n（2）`fetch`采用模块化设计，API分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些。\n\n（3）`fetch`通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。\n\n在用法上，`fetch`默认发出`GET`请求，返回一个`Promise`对象。比如：\n\n```js\nfetch(\"https://api.github.com/users/ruanyf\")\n  .then((response) => response.json())\n  .then((json) => console.log(json))\n  .catch((err) => console.log(\"Request Failed\", err));\n```\n\n上面示例中，`fetch()`接收到的`response`是一个`Stream`对象，`response.json()`是一个异步操作，取出所有内容，并将其转为\nJSON 对象。\n\n`Promise`可以使用`await`语法改写，使得语义更清晰。\n\n```js\nasync function getJSON() {\n  let url = \"https://api.github.com/users/ruanyf\";\n  try {\n    let response = await fetch(url);\n    return await response.json();\n  } catch (error) {\n    console.log(\"Request Failed\", error);\n  }\n}\n```\n\n> 注意：上面示例中，`await`语句必须放在`try...catch`里面，这样才能捕捉异步操作中可能发生的错误。\n\n后文都采用`await`的写法，不使用`.then()`的写法。\n\n# 二、Response对象\n\n## 2.1 Response对象的同步属性\n\n`fetch`请求成功以后，得到的是一个`Response`对象，它对应服务器的`HTTP`回应。\n\n前面说过，`Response`包含的数据通过`Stream`接口异步读取，但是它还包含一些同步属性，对应`HTTP`回应的标头信息`Headers`，可以立即读取。\n\n```js\nasync function fetchText() {\n  let response = await fetch(\"/readme.txt\");\n  console.log(response.status);\n  console.log(response.statusText);\n}\n```\n\n上面示例中，`response.status`和`response.statusText`就是同步属性，可以立即读取。具体列表如下：\n\n| 标头信息属性     | 类型     | 说明                                  |\n| ---------- | ------ | ----------------------------------- |\n| ok         | bool   | 表示请求是否成功，true对应状态码200到299，false对应其他 |\n| status     | number | HTTP的状态码                            |\n| statusText | string | HTTP的状态信息                           |\n| url        | string | 请求的URL。如果URL存在跳转，该属性返回的是最终URL       |\n| redirected | bool   | 表示请求是否发生过跳转                         |\n| type       | string | 请求的类型                               |\n\n`type`可能的值如下：\n\n| 参数             | 说明                                                                                  |\n| -------------- | ----------------------------------------------------------------------------------- |\n| basic          | 普通请求，即同源请求                                                                          |\n| cors           | 跨域请求                                                                                |\n| error          | 网络错误，主要用于 Service Worker                                                            |\n| opaque         | 如果`fetch`请求的`type`属性设为`no-cors`，就会返回这个值，详见请求部分。表示发出的是`简单的跨域请求`，类似`<form>`表单的那种跨域请求。 |\n| opaqueredirect | 如果fetch请求的`redirect`属性设为manual，就会返回这个值，详见请求部分。                                      |\n\n## 2.2 判断请求是否成功\n\n::: danger 注意\n`fetch`发出请求以后，有一个很重要的注意点：只有`网络错误`，或者`无法连接`时才会报错，其他情况都不会报错，而是认为请求成功。\n也就是说，即使服务器返回的状态码是`4xx`或`5xx`，`fetch`也不会报错（即`Promise`不会变为`rejected`状态）。 :::\n\n只有通过`Response.status`属性，得到`HTTP`回应的真实状态码，才能判断请求是否成功。请看下面的例子。\n\n```js\nasync function fetchText() {\n  let response = await fetch(\"/readme.txt\");\n  if (response.status >= 200 && response.status < 300) {\n    return await response.text();\n  } else {\n    throw new Error(response.statusText);\n  }\n}\n```\n\n上面示例中，`response.status`属性只有等于`2xx`才能认定请求成功。这里不用考虑网址跳转（状态码为\n3xx），因为`fetch`会将跳转的状态码自动转为`200`。\n\n另一种方法是判断`response.ok`是否为`true`。\n\nif (response.ok) { // 请求成功 } else { // 请求失败 }\n\n## 2.3 headers属性\n\n`Response`对象还有一个`Response.headers`属性，指向一个`Headers`对象，对应`HTTP`回应的所有标头，可以用`for...of`进行遍历。\n\n```js\nconst response = await fetch(url);\n\nfor (let [key, value] of response.headers) {\n  console.log(`${key} : ${value}`);\n}\n\n// 或者\nfor (let [key, value] of response.headers.entries()) {\n  console.log(`${key} : ${value}`);\n}\n```\n\n### Headers对象的方法\n\n| 方法名               | 说明                                |\n| ----------------- | --------------------------------- |\n| Headers.get()     | 根据指定的键名，返回键值                      |\n| Headers.has()     | 返回一个布尔值，表示是否包含某个标头                |\n| Headers.set()     | 将指定的键名设置为新的键值，如果该键名不存在则会添加        |\n| Headers.append()  | 添加标头                              |\n| Headers.delete()  | 删除标头                              |\n| Headers.keys()    | 返回一个遍历器，可以依次遍历所有键名。               |\n| Headers.values()  | 返回一个遍历器，可以依次遍历所有键值。               |\n| Headers.entries() | 返回一个遍历器，可以依次遍历所有键值对（[key, value]） |\n| Headers.forEach() | 依次遍历标头，每个标头都会执行一次参数函数             |\n\n上面的有些方法可以修改标头，那是因为继承自`Headers`接口。对于`HTTP回应`来说，修改标头意义不大，况且很多标头是只读的，浏览器不允许修改。\n这些方法中，最常用的是`response.headers.get()`，用于读取某个标头的值。\n\n```js\nlet res1 = await fetch(url);\nres1.headers.get(\"Content-Type\"); // application/json; charset=utf-8\n\n// 键名\nfor (let key of myHeaders.keys()) {\n  console.log(key);\n}\n\n// 键值\nfor (let value of myHeaders.values()) {\n  console.log(value);\n}\n\nlet res2 = await fetch(url);\nres2.headers.forEach(\n  (value, key) => console.log(key, \":\", value),\n);\n```\n\n## 2.4 读取内容的方法\n\nResponse对象根据服务器返回的不同类型的数据，提供了不同的读取方法。\n\n| 方法名           | 说明                                                                  |\n| ------------- | ------------------------------------------------------------------- |\n| text()        | 得到文本字符串                                                             |\n| json()        | 得到`JSON`对象                                                          |\n| blob()        | 得到二进制`Blob`对象，用于获取二进制文件                                             |\n| formData()    | 得到`FormData`表单对象，主要用在`Service Worker`里面，拦截用户提交的表单，修改某些数据以后，再提交给服务器。 |\n| arrayBuffer() | 得到二进制`ArrayBuffer`对象，主要用于获取流媒体文件。                                   |\n\n上面5个读取方法都是`异步`的，返回的都是`Promise`对象。必须等到异步操作结束，才能得到服务器返回的完整数据。\n\n```js\nconst res1 = await fetch(\"/users.html\");\nconst body = await res1.text();\ndocument.body.innerHTML = body;\n\n// 读取图片flower.jpg显示在网页上\nconst res2 = await fetch(\"flower.jpg\");\nconst myBlob = await res2.blob();\nconst objectURL = URL.createObjectURL(myBlob);\nconst myImage = document.querySelector(\"img\");\nmyImage.src = objectURL;\n\n// 直接获取图片的Base64编码\nlet myBlob = await res.blob()\n  function getBase64() {\n    return new Promise(function(resolve, reject) {\n      let reader = new FileReader();\n      reader.readAsDataURL(myBlob);\n      reader.onloadend = () => resolve(reader.result)\n      reader.onerror = () => reject('reader error');\n    });\n  }\nlet base64data = await getBase64();\nconsole.log(base64data)\n\n// 获取音频文件song.ogg然后在线播放\nconst audioCtx = new window.AudioContext();\nconst source = audioCtx.createBufferSource();\nconst res3 = await fetch(\"song.ogg\");\nconst buffer = await res3.arrayBuffer();\nconst decodeData = await audioCtx.decodeAudioData(buffer);\nsource.buffer = buffer;\nsource.connect(audioCtx.destination);\nsource.loop = true;\n```\n\n## 2.5 Response.clone()\n\n`Stream`对象只能读取一次，读取完就没了。这意味着，前一节的五个读取方法，`只能使用一个`，否则会报错。\n\n```js\nlet text = await response.text();\nlet json = await response.json(); // 报错\n```\n\n上面示例先使用了`response.text()`，把`Stream`读完了。后面再调用`response.json()`就没有内容可读了，所以报错。\n\n`Response`对象提供`clone()`方法，创建Response对象的`副本`，实现多次读取。\n\n```js\nconst response1 = await fetch(\"flowers.jpg\");\n// 复制Response对象\nconst response2 = response1.clone();\nconst myBlob1 = await response1.blob();\nconst myBlob2 = await response2.blob();\n\nimage1.src = URL.createObjectURL(myBlob1);\nimage2.src = URL.createObjectURL(myBlob2);\n```\n\n`Response`对象还有一个`redirect()`方法，用于将`Response`结果重定向到指定的`URL`。该方法一般只用在`Service Worker`里面，这里就不介绍了。\n\n## 2.6 Response.body 属性\n\n`Response.body`属性是`Response`对象暴露出的底层接口，返回一个`ReadableStream`对象供用户操作。\n\n它可以用来分块读取内容，应用之一就是`显示下载的进度`。\n\n```js\nconst response = await fetch(\"flower.jpg\");\nconst reader = response.body.getReader();\n\nwhile (true) {\n  const { done, value } = await reader.read();\n  if (done) {\n    break;\n  }\n  console.log(`Received ${value.length} bytes`);\n}\n```\n\n上面示例中，`response.body.getReader()`方法返回一个遍历器。这个遍历器的`read()`方法每次返回一个对象，表示本次读取的内容块。\n\n这个对象的`done`属性是一个`bool`，用来判断有没有读完。`value`属性是一个`arrayBuffer`数组，表示内容块的内容，而`value.length`属性是当前块的大小。\n\n# 三、fetch的第二个参数\n\n## fetch配置对象的完整API\n\n```js\nconst response = fetch(url, {\n  method: \"GET\",\n  headers: {\n    \"Content-Type\": \"text/plain;charset=UTF-8\",\n  },\n  body: undefined,\n  referrer: \"about:client\",\n  referrerPolicy: \"no-referrer-when-downgrade\",\n  mode: \"cors\",\n  credentials: \"same-origin\",\n  cache: \"default\",\n  redirect: \"follow\",\n  integrity: \"\",\n  keepalive: false,\n  signal: undefined,\n});\n```\n\n`fetch()`请求的底层用的是`Request()`对象的接口，参数完全一样，因此上面的`API`也是`Request()`的`API`。\n\n这些属性里面，headers、body前面已经给过示例了，下面是其他属性的介绍。\n\n### method\n\n`method`属性指定`HTTP`请求的方法，`POST`、`DELETE`、`PUT`都在这个属性设置。\n\n### cache\n\n`cache`属性指定如何处理缓存。可能的取值如下：\n\n| 值              | 说明                                   |\n| -------------- | ------------------------------------ |\n| default        | 默认值，先在缓存里面寻找匹配的请求                    |\n| no-store       | 直接请求远程服务器，并且不更新缓存                    |\n| reload         | 直接请求远程服务器，并且更新缓存                     |\n| no-cache       | 将服务器资源跟本地缓存进行比较，有新的版本才使用服务器资源，否则使用缓存 |\n| force-cache    | 缓存优先，只有不存在缓存的情况下，才请求远程服务器            |\n| only-if-cached | 只检查缓存，如果缓存里面不存在，将返回504错误             |\n\n### mode\n\nmode属性指定请求的模式。可能的取值如下：\n\n| 值           | 说明    |\n| ----------- | ------------------------------------------------------------------ |\n| cors        | 默认值，允许跨域请求  |\n| same-origin | 只允许同源请求  |\n| no-cors     | 只限于`GET`、`POST`和`HEAD`，并且只能使用有限的几个简单标头，不能添加跨域的复杂标头，相当于提交表单所能发出的请求。 |\n\n> no-cors可以用于简单的跨域请求。\n\n### credentials\n\n`credentials`属性指定是否发送`Cookie`。可能的取值如下：\n\n| 值           | 说明                          |\n| ----------- | --------------------------- |\n| same-origin | 默认值，同源请求时发送Cookie，跨域请求时不发送。 |\n| include     | 不管同源请求，还是`跨域`请求，一律发送Cookie。 |\n| omit        | 一律不发送。                      |\n\n> `跨域`请求发送`Cookie`，需要将`credentials`属性设为`include`。\n\n### signal\n\n`signal`属性指定一个`AbortSignal`实例，用于取消`fetch`请求。\n\n### keepalive\n\n`keepalive`属性用于页面卸载时，告诉浏览器在后台保持连接，继续发送数据。\n\n一个典型的场景就是，用户离开网页时，脚本向服务器提交一些用户行为的统计信息。这时，如果不用`keepalive`属性，数据可能无法发送，因为浏览器已经把页面卸载了。\n\n```js\nwindow.onunload = function () {\n  fetch(\"/analytics\", {\n    method: \"POST\",\n    body: \"statistics\",\n    keepalive: true,\n  });\n};\n```\n\n### redirect\n\n`redirect`属性指定HTTP跳转的处理方法。可能的取值如下：\n\n| 值      | 说明                                                                                      |\n| ------ | --------------------------------------------------------------------------------------- |\n| follow | 默认值，跟随HTTP跳转                                                                            |\n| error  | 如果发生跳转，fetch()就报错                                                                       |\n| manual | 不跟随HTTP跳转，但是`response.url`属性会指向新的URL，`response.redirected`属性会变为`true`，由开发者自己决定后续如何处理跳转。 |\n\n### integrity\n\n`integrity`属性指定一个`哈希`值，用于检查HTTP回应传回的数据是否等于这个预先设定的哈希值。\n\n比如，下载文件时，检查文件的 SHA-256 哈希值是否相符，确保没有被篡改。\n\n```js\nfetch(\"http://site.com/file\", {\n  integrity: \"sha256-abcdef\",\n});\n```\n\n### referrer\n\n`referrer`属性用于设定请求的`referer`标头。\n\n这个属性可以为任意字符串，也可以设为`空字符串`（即不发送referer标头）。\n\n### referrerPolicy\n\n`referrerPolicy`属性用于设定`Referer`标头的规则。可能的取值如下：\n\n| 值                               | 说明                                                         |\n| ------------------------------- | ---------------------------------------------------------- |\n| no-referrer-when-downgrade      | 默认值，总是发送Referer标头，除非从HTTPS页面请求HTTP资源时不发送。                  |\n| no-referrer                     | 不发送Referer标头。                                              |\n| origin                          | Referer标头只包含域名，不包含完整的路径。                                   |\n| origin-when-cross-origin        | 同源请求Referer标头包含完整的路径，跨域请求只包含域名。                            |\n| same-origin                     | 跨域请求不发送Referer，同源请求发送。                                     |\n| strict-origin                   | Referer标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送Referer标头。            |\n| strict-origin-when-cross-origin | 同源请求时Referer标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。 |\n| unsafe-url                      | 不管什么情况，总是发送Referer标头。                                      |\n\n# 四、一些实例\n\n## 发送POST请求\n\n```js\nconst response = await fetch(url, {\n  method: \"POST\",\n  headers: {\n    \"Content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n  },\n  body: \"foo=bar&lorem=ipsum\",\n});\n\nconst json = await response.json();\n```\n\n> 注意，有些标头不能通过headers属性设置，比如`Content-Length`、`Cookie`、`Host`等等。它们是由浏览器自动生成，无法修改。\n\n## 提交JSON数据\n\n```js\nconst user = { name: \"John\", surname: \"Smith\" };\nconst response = await fetch(\"/article/fetch/post/user\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json;charset=utf-8\",\n  },\n  body: JSON.stringify(user),\n});\n```\n\n## 提交表单\n\n```js\nconst form = document.querySelector(\"form\");\n\nconst response = await fetch(\"/users\", {\n  method: \"POST\",\n  body: new FormData(form),\n});\n```\n\n## 文件上传\n\n如果表单里面有文件选择器，可以用前一个例子的写法，上传的文件包含在整个表单里面，一起提交。\n\n另一种方法是用脚本添加文件，构造出一个表单，进行上传，请看下面的例子。\n\n```js\nconst input = document.querySelector('input[type=\"file\"]');\n\nconst data = new FormData();\ndata.append(\"file\", input.files[0]);\ndata.append(\"user\", \"foo\");\n\nfetch(\"/avatars\", {\n  method: \"POST\",\n  body: data,\n});\n```\n\n上传二进制文件时，不用修改标头的`Content-Type`，浏览器会自动设置。\n\n## 直接上传二进制数据\n\n`fetch`也可以直接上传二进制数据，将`Blob`或`arrayBuffer`数据放在`body`属性里面。\n\n```js\nlet blob = await new Promise((resolve) =>\n  canvasElem.toBlob(resolve, \"image/png\")\n);\n\nlet response = await fetch(\"/article/fetch/post/image\", {\n  method: \"POST\",\n  body: blob,\n});\n```\n\n## 取消fetch请求\n\n如果中途想要取消`fetch`请求，需要使用`AbortController`对象。\n\n```js\nlet controller = new AbortController();\nlet signal = controller.signal;\n\nfetch(url, {\n  signal,\n});\n\nsignal.addEventListener(\"abort\", () => console.log(\"abort!\"));\n\ncontroller.abort(); // 取消\nconsole.log(signal.aborted); // true\n```\n\n`controller.abort()`方法用于发出取消信号。这时会触发`abort`事件，这个事件可以监听，也可以通过`controller.signal.aborted`属性判断取消信号是否已经发出。\n\n下面是一个1秒后自动取消请求的例子。\n\n```js\nlet controller = new AbortController();\nsetTimeout(() => controller.abort(), 1000);\n\ntry {\n  let response = await fetch(\"/long-operation\", {\n    signal: controller.signal,\n  });\n} catch (err) {\n  if (err.name == \"AbortError\") {\n    console.log(\"Aborted!\");\n  } else {\n    throw err;\n  }\n}\n```\n\n# 参考链接\n\n- [Network requests: Fetch](https://javascript.info/fetch)\n- [node-fetch](https://github.com/node-fetch/node-fetch)\n- [Introduction to fetch()](https://developers.google.com/web/updates/2015/03/introduction-to-fetch)\n- [Using Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)\n- [Javascript Fetch API: The XMLHttpRequest evolution](https://developerhowto.com/2019/09/14/javascript-fetch-api/)\n\n\n# 评论","date_published":"Thu, 13 Jun 2024 07:03:47 GMT"},{"id":"http://localhost/archive/denozhongruhehuoqucaozuoxitongheyingjianxinxi/","url":"http://localhost/archive/denozhongruhehuoqucaozuoxitongheyingjianxinxi/","title":"Deno中如何获取操作系统和硬件信息？","content_html":"Runtime APIs Runtime\n\nDeno.version\nDeno.build\n\n# 评论","date_published":"Wed, 12 Jun 2024 14:52:05 GMT"},{"id":"http://localhost/archive/denozhongruhehuoquyonghumulu-linshimulu/","url":"http://localhost/archive/denozhongruhehuoquyonghumulu-linshimulu/","title":"Deno中如何获取用户目录、临时目录？","content_html":"```ts\n// 获取用户目录\nconsole.log(Deno.env.get(\"HOME\")); \nconsole.log(Deno.env.get(\"TEMP\"));\n\n// 创建临时文件\nconst tempFilePath = await Deno.makeTempFile();\nconsole.log(\"Temp file path:\", tempFilePath);\n```\n\n类似的例子我们可以在官网查询。\n\nhttps://docs.deno.com/examples/temporary-files\n\n# 评论","date_published":"Wed, 12 Jun 2024 14:28:07 GMT"},{"id":"http://localhost/archive/puppeteer/","url":"http://localhost/archive/puppeteer/","title":"puppeteer","content_html":"# 概述\n\n[puppeteer](https://zhaoqize.github.io/puppeteer-api-zh_CN/)是一个优秀的浏览器。\n\n## 安装\n\n```shell\nPUPPETEER_PRODUCT=chrome deno run -A --unstable https://deno.land/x/puppeteer@16.2.0/install.ts\n```\n\n经常在使用脚本自动安装时会出错，这个时候最好手动下载可执行文件。\n\n可以根据提示`Uncaught Error: Could not find browser revision 1022525.`获得具体版本编号。\n\n通常下载链接类似：\n`https://storage.googleapis.com/chromium-browser-snapshots/Linux_x64/1022525/chrome-linux.zip`，这个里面的`1022525`是版本号。\n\n\n# 基础知识\n\n我们通过一个简单的实例来做一些了解。\n\n```js\nconst puppeteer = require(\"puppeteer\");\n(async () => {\n  const browser = await puppeteer.launch({\n    headless: false, //有浏览器界面启动\n    defaultViewport: null,\n    timeout: 30000, // 默认超时为30秒，设置为0则表示不设置超时\n    slowMo: 500, //放慢浏览器执行速度，方便测试观察\n    args: [\"--no-sandbox\"],\n  });\n  const page = await browser.newPage();\n  await page.goto(\"https://www.baidu.com\");\n  await page.close();\n  await browser.close();\n})();\n```\n\n> `puppeteer.launch`每次都会启动一个`Chrome`实例。\n\n除此之外，我们也可以使用`puppeteer.connect`连接一个已经存在的`Chrome`实例。\n\n首先启动实例。找到chrome的安装目录，通常在`C:\\Program Files (x86)\\Google\\Chrome\\Application`下面。然后从命令行启动：\n\n```shell\n$ chrome.exe --remote-debugging-port=9222 --user-data-dir=C:\\tmp\n```\n\n这样会在`9222`端口启动一个调试实例。`user-data-dir`好像必须要配置，否则连接不成功？然后可以在`http://127.0.0.1:9222/json/version`查看到实例信息。\n\n```txt\n// 新建一个标签页（空白页或者带参数默认加载URL）\nhttp://localhost:9222/json/new\nhttp://localhost:9222/json/new?http://www.baidu.com\n\n// 关闭一个标签页，传入该页面的id。\nhttp://localhost:9222/json/close/477810FF-323E-44C5-997C-89B7FAC7B158\n\n// 激活标签页。\nhttp://localhost:9222/json/activate/477810FF-323E-44C5-997C-89B7FAC7B158\n\n// 获取所有开打标签的信息。\nhttp://loacalhost:9222/json/list\n```\n\n更详细的协议信息可以[查看官网](https://chromedevtools.github.io/debugger-protocol-viewer/1-2/)\n\n```js\nconst puppeteer = require(\"puppeteer\");\nlet request = require(\"request-promise-native\");\n\n(async () => {\n  //通过 9222 端口的 http 接口获取对应的 websocketUrl\n  let version = await request({\n    uri: \"http://127.0.0.1:9222/json/version\",\n    json: true,\n  });\n  console.log(version);\n  //直接连接已经存在的 Chrome\n  let browser = await puppeteer.connect({\n    browserWSEndpoint: version.webSocketDebuggerUrl,\n  });\n  const page = await browser.newPage();\n  await page.goto(\"https://www.baidu.com\");\n  await page.close();\n  await browser.disconnect();\n})();\n```\n\n# Browser对象API\n\n| 方法名称                 | 返回值                  | 说明                                                |\n| :------------------- | :------------------- | :------------------------------------------------ |\n| browser.close()      | Promise              | 关闭浏览器                                             |\n| browser.disconnect() | void                 | 断开浏览器连接                                           |\n| browser.newPage()    | Promise(Page)        | 创建一个`Page`实例                                      |\n| browser.pages()      | Promise(Array(Page)) | 获取所有打开的`Page`实例                                   |\n| browser.targets()    | Array(Target)        | 获取所有活动的`targets`                                  |\n| browser.version()    | Promise(String)      | 获取浏览器的版本                                          |\n| browser.wsEndpoint() | String               | 返回浏览器实例的`socket`连接`URL`，可以通过这个`URL`重连接`chrome实例`。 |\n\n## Page对象API\n\n这里要明确一些基本概念。元素的各种属性。\n\n```html\n<view>这是innerText</view>\n```\n\n要获取`这是innerText`需要用`innerText`。\n\n## 获取文本\n\n```js\nlet text = await page.$eval(\"#app\", (ele) => ele.innerText);\n```\n\n## 获取元素的属性\n\n比如，要获取下面这个元素的`class`属性：\n\n```html\n<div class=\"box\" style=\"background: #F00\">盒子</div>\n```\n\n```js\nlet checkd = await page.$eval(`#app`, (el) => el.getAttribute(\"class\"));\n```\n\n## 设置文本框值\n\n为了保险一点，通常在输入前清空一下文本框比较好。\n\n```js\nawait page.$eval(\"#input\", (ele) => ele.value = \"\"); // 清空文本框\nawait page.type(\"#mytextarea\", \"Hello\"); // 立即输入\nawait page.type(\"#mytextarea\", \"World\", { delay: 100 }); // 输入变慢，像一个用户\n```\n\n## 获取frame\n\n`ddlogin-iframe`是`frame`的名字，也就是`id`。\n\n```js\nconst ddloginIframe = page.frames().find((frame) =>\n  frame.name() === \"ddlogin-iframe\"\n);\nconst qrcode = await ddloginIframe.$eval(\"#qrcode > img\", (ele) => ele.src);\n```\n\n## 获取页面标题\n\n```txt\npage.title()\nreturns: <Promise<string>> 返回页面标题.\n```\n\n## 添加cookie\n\n```js\nawait page.goto(url);\n\nconst cookies = [{\n  \"name\": \"cookie1\",\n  \"value\": \"val1\",\n}, {\n  \"name\": \"cookie2\",\n  \"value\": \"val2\",\n}, {\n  \"name\": \"cookie3\",\n  \"value\": \"val3\",\n}];\n\nawait page.setCookie(...cookies);\n```\n\n# 参考\n\n- [官网文档](https://pptr.dev/)\n\n\n# 评论","date_published":"Wed, 12 Jun 2024 09:51:17 GMT"}]}